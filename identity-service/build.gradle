plugins {
    id 'idea'
    id 'java'
    id 'jacoco'
    id 'org.springframework.boot' version '2.0.4.RELEASE'
    id "au.com.dius.pact" version "3.6.11"
}

repositories {
    mavenCentral()
}

dependencies {
    compile "org.springframework.boot:spring-boot-starter-web:${springVersion}"
    compile "org.springframework.boot:spring-boot-starter-actuator:${springVersion}"
    compile "org.springframework.boot:spring-boot-starter-data-rest:${springVersion}"
    compile "org.springframework.boot:spring-boot-starter-data-mongodb:${springVersion}"
    compile "org.springframework.cloud:spring-cloud-starter-config:${springVersion}"
    runtime "org.springframework.boot:spring-boot-devtools:${springVersion}"
    compile "org.springframework.cloud:spring-cloud-starter-netflix-eureka-client:${springVersion}"
    compile "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    compile "com.google.code.gson:gson:${gsonVersion}"
    compile "au.com.dius:pact-jvm-provider-junit5_2.12:${pactJunit5Version}"
    compile "io.springfox:springfox-swagger2:2.9.2"
    compile "io.springfox:springfox-swagger-ui:2.9.2"
    compileOnly "org.projectlombok:lombok:${lombokVersion}"
    annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
    testImplementation "org.mockito:mockito-junit-jupiter:${mockitoJunit5Version}"
    testImplementation "org.springframework.boot:spring-boot-starter-test:${springVersion}"
    testImplementation "de.flapdoodle.embed:de.flapdoodle.embed.mongo:${mongoVersion}"
    testImplementation "org.springframework:spring-jdbc:${springJdbcVersion}"
    testImplementation "au.com.dius:pact-jvm-provider-junit5_2.12:${pactJunit5Version}"
    testImplementation "au.com.dius:pact-jvm-model:${pactJunit5Version}"
    testImplementation "com.github.rest-driver:rest-client-driver:${restClientDriverVersion}"
    testImplementation "org.junit.jupiter:junit-jupiter-api:${junit5Version}"
    testImplementation "org.junit.jupiter:junit-jupiter-engine:${junit5Version}"
    testImplementation "net.minidev:json-smart:${jsonSmartVersion}"
}

bootRun {
    systemProperties = System.properties
}

group = 'com.gov.zw'
version = "${releaseVersion}"
description = 'identity-service'
sourceCompatibility = "${javaVersion}"

tasks.withType(JavaCompile) {
    options.encoding = "${charset}"
}

test {
    useJUnitPlatform()
    testLogging {
        events = ["passed", "failed", "skipped"]
    }
}
